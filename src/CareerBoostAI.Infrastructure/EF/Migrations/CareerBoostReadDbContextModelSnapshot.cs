// <auto-generated />
using System;
using CareerBoostAI.Infrastructure.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CareerBoostAI.Infrastructure.EF.Migrations
{
    [DbContext(typeof(CareerBoostReadDbContext))]
    partial class CareerBoostReadDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CVId")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.Cv", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique();

                    b.ToTable("Cvs");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.CvLanguage", b =>
                {
                    b.Property<Guid>("CvId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("char(36)");

                    b.HasKey("CvId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CvLanguage");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.CvSkill", b =>
                {
                    b.Property<Guid>("CvId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("char(36)");

                    b.HasKey("CvId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CvSkill");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CvId")
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("SequenceIndex")
                        .HasColumnType("int unsigned");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id", "CvId");

                    b.HasIndex("CvId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CvId")
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("SequenceIndex")
                        .HasColumnType("int unsigned");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id", "CvId");

                    b.HasIndex("CvId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.Upload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StorageAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StorageMedium")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Upload");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.Cv", b =>
                {
                    b.HasOne("CareerBoostAI.Infrastructure.EF.Models.Candidate", "Candidate")
                        .WithOne("Cv")
                        .HasForeignKey("CareerBoostAI.Infrastructure.EF.Models.Cv", "CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.CvLanguage", b =>
                {
                    b.HasOne("CareerBoostAI.Infrastructure.EF.Models.Cv", "Cv")
                        .WithMany()
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerBoostAI.Infrastructure.EF.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cv");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.CvSkill", b =>
                {
                    b.HasOne("CareerBoostAI.Infrastructure.EF.Models.Cv", "Cv")
                        .WithMany()
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerBoostAI.Infrastructure.EF.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cv");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.Education", b =>
                {
                    b.HasOne("CareerBoostAI.Infrastructure.EF.Models.Cv", "Cv")
                        .WithMany("Educations")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.Experience", b =>
                {
                    b.HasOne("CareerBoostAI.Infrastructure.EF.Models.Cv", "Cv")
                        .WithMany("Experiences")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.Upload", b =>
                {
                    b.HasOne("CareerBoostAI.Infrastructure.EF.Models.Candidate", "Candidate")
                        .WithMany("Uploads")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.Candidate", b =>
                {
                    b.Navigation("Cv")
                        .IsRequired();

                    b.Navigation("Uploads");
                });

            modelBuilder.Entity("CareerBoostAI.Infrastructure.EF.Models.Cv", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Experiences");
                });
#pragma warning restore 612, 618
        }
    }
}
